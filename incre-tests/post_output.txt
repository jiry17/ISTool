
solverConfig :: GrisetteSMTConfig 16
solverConfig = approx Proxy z3
 
ioPair :: [(List, Integer)] -> IO ()
ioPair pairs = do
    res <- solve solverConfig (constraint pairs)
    case res of
        Left _ -> do
            print "fail!"
        Right model -> do
            print "success!"
    where
        constraint :: [(List, Integer)] -> SymBool
        constraint [] = con True
        constraint ((x, y) : xs) = main' x ==~ (toSym y) &&~ constraint xs

-- calculate time
timeIt :: IO a -> IO (NominalDiffTime, a)
timeIt action = do
    startTime <- getCurrentTime
    result <- action
    endTime <- getCurrentTime
    let elapsedTime = diffUTCTime endTime startTime
    return (elapsedTime, result)

main :: IO ()
main = do
    let pairs = [